generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         Role      @default(USER)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  nextOrderNo  Int       @default(1) @map("next_order_no")
  addresses    Address[]
  carts        Cart?
  orders       Order[]
  payments     Payment[]

  @@map("users")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  products  Product[]

  @@map("categories")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  slug        String      @unique
  price       Decimal     @db.Decimal(12, 2)
  stock       Int         @default(0)
  imageUrl    String?     @map("image_url")
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  deletedAt   DateTime?   @map("deleted_at")
  categoryId  Int         @map("category_id")
  description String?     @map("description") @db.LongText
  cartItems   CartItem[]
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@index([name])
  @@index([price])
  @@index([isActive])
  @@map("products")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int     @map("cart_id")
  productId Int     @map("product_id")
  qty       Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([productId], map: "cart_items_product_id_fkey")
  @@map("cart_items")
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  label      String
  recipient  String
  phone      String
  street     String
  city       String
  province   String
  postalCode String   @map("postal_code")
  isDefault  Boolean  @default(false) @map("is_default")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  isArchived Boolean  @default(false) @map("is_archived")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@index([userId, isDefault])
  @@index([userId, isDefault, isArchived])
  @@map("addresses")
}

model Order {
  id             Int         @id @default(autoincrement())
  userId         Int         @map("user_id")
  total          Decimal     @db.Decimal(12, 2)
  status         OrderStatus @default(PROCESSED)
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  orderNo        Int         @map("order_no")
  addressId      Int         @map("address_id")
  note           String?     @map("note")
  shippingCost   Decimal     @map("shipping_cost") @db.Decimal(12, 2)
  shippingMethod Courier     @map("shipping_method")
  items          OrderItem[]
  address        Address     @relation(fields: [addressId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
  payment        Payment?

  @@unique([userId, orderNo])
  @@index([userId])
  @@index([status])
  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@index([addressId], map: "orders_address_id_fkey")
  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  productId Int     @map("product_id")
  price     Decimal @db.Decimal(12, 2)
  qty       Int     @default(1)
  subtotal  Decimal @db.Decimal(12, 2)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
  @@index([productId], map: "order_items_product_id_fkey")
  @@map("order_items")
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int           @unique @map("order_id")
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  proofUrl  String?       @map("proof_url") @db.LongText
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  userId    Int?          @map("user_id")
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user      User?         @relation(fields: [userId], references: [id])

  @@index([userId], map: "payments_user_id_fkey")
  @@map("payments")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PROCESSED
  SHIPPED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  CASH
  COD
  BANK_TRANSFER
  EWALLET
}

enum Courier {
  JNE
  JNT
  SICEPAT
}
